{
  "name": "typescript-formatter",
  "version": "0.1.4",
  "description": "Formatter of TypeScript code",
  "main": "./index",
  "bin": {
    "tsfmt": "./bin/tsfmt"
  },
  "scripts": {
    "build": "grunt default",
    "test": "grunt test"
  },
  "keywords": [
    "TypeScript"
  ],
  "author": {
    "name": "vvakame+dev@gmail.com"
  },
  "license": "MIT",
  "homepage": "https://github.com/vvakame/typescript-formatter",
  "repository": {
    "type": "git",
    "url": "git@github.com:vvakame/typescript-formatter.git"
  },
  "bugs": {
    "url": "https://github.com/vvakame/typescript-formatter/issues"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "dependencies": {
    "commander": "2.2.0",
    "editorconfig": "0.11.4"
  },
  "devDependencies": {
    "grunt": "0.4.5",
    "grunt-contrib-clean": "0.5.0",
    "grunt-ts": "1.11.2",
    "typescript": "1.0.1",
    "grunt-tslint": "0.4.1",
    "grunt-tsd": "0.1.0",
    "tslint": "0.4.9",
    "q": "1.0.1",
    "grunt-mocha-test": "0.10.2",
    "grunt-espower": "0.7.1",
    "power-assert": "0.7.2",
    "grunt-exec": "0.4.5",
    "matchdep": "0.3.0"
  },
  "readme": "# TypeScript Formatter (tsfmt) [![Build Status](https://travis-ci.org/vvakame/typescript-formatter.svg)](https://travis-ci.org/vvakame/typescript-formatter) [![Dependency Status](https://david-dm.org/vvakame/typescript-formatter.svg?theme=shields.io)](https://david-dm.org/vvakame/typescript-formatter)\n\nA TypeScript code formatter powered by TypeScript Compiler Service.\n\n```bash\n$ tsfmt\n\n  Usage: tsfmt [options] <file ...>\n\n  Options:\n\n    -h, --help         output usage information\n    -V, --version      output the version number\n    -r, --replace      replace .ts file\n    --no-tslint        don't read a tslint.json\n    --no-editorconfig  don't read a .editorconfig\n    --no-tsfmt         don't read a tsfmt.json\n    --verbose          makes output more verbose\n```\n\n## Installation\n\n```npm install -g typescript-formatter```\n\n## Usage\n\n```bash\n$ cat sample.ts\nclass Sample {hello(word=\"world\"){return \"Hello, \"+word;}}\nnew Sample().hello(\"TypeScript\");\n```\n\n```bash\n# basic. read file, output to stdout.\n$ tsfmt sample.ts\nclass Sample { hello(word= \"world\") { return \"Hello, \" + word; } }\nnew Sample().hello(\"TypeScript\");\n```\n\n```bash\n# replace. read file, and replace file.\n$ tsfmt -r sample.ts\nreplaced sample.ts\n$ cat sample.ts\nclass Sample { hello(word= \"world\") { return \"Hello, \" + word; } }\nnew Sample().hello(\"TypeScript\");\n```\n\n## Read Settings From Files\n\n1st. Read settings from tsfmt.json.\n\n```json\n{\n  \"indentSize\": 4,\n  \"tabSize\": 4,\n  \"newLineCharacter\": \"\\r\\n\",\n  \"convertTabsToSpaces\": true,\n  \"insertSpaceAfterCommaDelimiter\": true,\n  \"insertSpaceAfterSemicolonInForStatements\": true,\n  \"insertSpaceBeforeAndAfterBinaryOperators\": true,\n  \"insertSpaceAfterKeywordsInControlFlowStatements\": true,\n  \"insertSpaceAfterFunctionKeywordForAnonymousFunctions\": false,\n  \"insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis\": false,\n  \"placeOpenBraceOnNewLineForFunctions\": false,\n  \"placeOpenBraceOnNewLineForControlBlocks\": false\n}\n\n```\n\n2nd. Read settings from .editoconfig ([editorconfig](http://editorconfig.org/))\n\n```text\n# EditorConfig is awesome: http://EditorConfig.org\n\n# top-most EditorConfig file\nroot = true\n\n# Unix-style newlines with a newline ending every file\n[*]\nindent_style = tab\ntab_width = 2\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n```\n\n3rd. Read settings from tslint.json ([tslint](https://www.npmjs.org/package/tslint))\n\n```json\n{\n  \"rules\": {\n    \"indent\": [true, 4]\n    \"whitespace\": [true,\n      \"check-branch\",\n      \"check-operator\",\n      \"check-separator\"\n    ]\n  }\n}\n```\n\n### Read Settings Rules\n\n```\n$ tree -a                                                                                       [~/Dropbox/work/typescript-formatter/example]\n.\n├── foo\n│   ├── bar\n│   │   ├── .editorconfig\n│   │   └── buzz.ts\n│   ├── fuga\n│   │   ├── piyo.ts\n│   │   └── tsfmt.json\n│   └── tsfmt.json\n└── tslint.json\n\n3 directories, 6 files\n```\n\n1. exec `$ tsfmt -r foo/bar/buzz.ts foo/fuga/piyo.ts`\n2. for foo/bar/buzz.ts, read foo/tsfmt.json and foo/bar/.editorcondig and ./tslint.json\n3. for foo/fuga/piyo.ts, read foo/fuga/tsfmt.json and ./tslint.json\n",
  "readmeFilename": "README.md",
  "_id": "typescript-formatter@0.1.4",
  "_from": "typescript-formatter@~0.1.4"
}

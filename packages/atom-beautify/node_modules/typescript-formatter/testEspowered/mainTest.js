var assert = require('power-assert');
var Q = require('q');
var fs = require('fs');
var path = require('path');
var childProcess = require('child_process');
var lib = require('../lib/lib');
function collectFileName(dirName) {
    var fileName = [];
    fs.readdirSync(dirName).forEach(function (name) {
        var newName = dirName + '/' + name;
        var stats = fs.statSync(newName);
        if (stats.isDirectory()) {
            fileName = fileName.concat(collectFileName(newName));
        } else if (stats.isFile()) {
            fileName.push(newName);
        }
    });
    return fileName;
}
function checkByTslint(configFileName, tsfileName, errorExpected) {
    var d = Q.defer();
    var process = childProcess.spawn('./node_modules/.bin/tslint', [
            '-c',
            configFileName,
            '-f',
            tsfileName
        ]);
    var stdout = '';
    process.stdout.on('data', function (data) {
        stdout += data.toString();
    });
    var stderr = '';
    process.stderr.on('data', function (data) {
        stderr += data.toString();
    });
    process.on('exit', function (code) {
        var success = !code;
        var action;
        if (!errorExpected) {
            if (success) {
                action = 'resolve';
                d.resolve(true);
            } else {
                action = 'reject';
                d.reject(tsfileName + ' must be a good code.\n' + stdout);
            }
        } else {
            if (success) {
                action = 'reject';
                d.reject(tsfileName + ' must be a bad code.');
            } else {
                action = 'resolve';
                d.resolve(true);
            }
        }
    });
    return d.promise;
}
describe('tsfmt test', function () {
    var fixtureDir = './tests/fixture';
    var expectedDir = './tests/expected';
    describe('processFiles function', function () {
        var fileNames = collectFileName(fixtureDir);
        fileNames.filter(function (fileName) {
            return /\.ts$/.test(fileName);
        }).forEach(function (fileName) {
            it(fileName, function (done) {
                var resultMap = lib.processFiles([fileName], {
                        dryRun: true,
                        replace: false,
                        tslint: true,
                        editorconfig: true,
                        tsfmt: true
                    });
                var result = resultMap[fileName];
                assert(assert._expr(assert._capt(assert._capt(result, 'arguments/0/left') !== null, 'arguments/0'), {
                    content: 'assert(result !== null)',
                    filepath: 'tests/mainTest.js',
                    line: 80
                }));
                var expectedTsFileName = fileName.replace(fixtureDir, expectedDir);
                if (!fs.existsSync(expectedTsFileName)) {
                    fs.writeFileSync(expectedTsFileName, result.dest);
                }
                var expected = fs.readFileSync(expectedTsFileName, 'utf-8');
                assert(assert._expr(assert._capt(assert._capt(expected, 'arguments/0/left') === assert._capt(assert._capt(result, 'arguments/0/right/object').dest, 'arguments/0/right'), 'arguments/0'), {
                    content: 'assert(expected === result.dest)',
                    filepath: 'tests/mainTest.js',
                    line: 89
                }));
                var expectedOptionsFileName = expectedTsFileName.replace(/\.ts$/, '.json');
                if (!fs.existsSync(expectedOptionsFileName)) {
                    fs.writeFileSync(expectedOptionsFileName, JSON.stringify(result.options, null, 2));
                }
                var expectedOptions = JSON.parse(fs.readFileSync(expectedOptionsFileName, 'utf-8'));
                assert.deepEqual(assert._expr(assert._capt(expectedOptions, 'arguments/0'), {
                    content: 'assert.deepEqual(expectedOptions, result.options)',
                    filepath: 'tests/mainTest.js',
                    line: 98
                }), assert._expr(assert._capt(assert._capt(result, 'arguments/1/object').options, 'arguments/1'), {
                    content: 'assert.deepEqual(expectedOptions, result.options)',
                    filepath: 'tests/mainTest.js',
                    line: 98
                }));
                var tslintConfigName = path.dirname(fileName) + '/tslint.json';
                if (!fs.existsSync(tslintConfigName)) {
                    done();
                    return;
                }
                if (fileName === './tests/fixture/tslint/indent/main.ts') {
                    done();
                    return;
                }
                Q.all([
                    checkByTslint(tslintConfigName, fileName, true),
                    checkByTslint(tslintConfigName, expectedTsFileName, false)
                ]).catch(function (errorMsg) {
                    assert(false, errorMsg);
                }).finally(function () {
                    done();
                }).done();
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,
